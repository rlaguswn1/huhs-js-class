// 비동기, 콜백 함수, 프로미스

// 동기 vs 비동기

// 동기: 그동안 했던거랑 비슷하다. 그 코드를 평가?해서 바로 실행 >> 순서대로
console.log(1);
console.log(2);
console.log(3);

//비동기: 

function func() {
    console.log("빵!")
}

// 함수를 넘겨주고 기다렸다가 실행 >> 넘겨줬다 >> 콜백함수
setTimeout(func, 1000) //숫자는 시간의 '초'고, ms 단위

/* set timeout을 1000ms로 주면 1, 3 출력 > 1초후 2 출력 이렇게 되는데 0ms로 주면 어케될까? 쭉 이어서? >> 1, 3, 2로 나옴
왜냐? > 비동기 코드고, 비동기 방식으로 출력돼서

힙: 콜스택에서 사용될때 변수/객채를 가져올때 잠시 저장해두는 메모리 공간
콜 스택: 1 > 2 > 3
1 > 실행
2 > settimeout이므로 webapi, nodejs로 일단 이동 > 거기서 타임아웃을 하고, 콜백함수가 태스크큐로 갔다가 콜스택으로 감
3 > 실행
태스크 큐: 
web api, nodejs:

비동기: 타이머 함수, 이벤트, fetch함수 - 콜스택이 비어있을때만 일을 줌
*/
console.log(1); // 1번
setTimeout(() => { // 2번
    console.log("2");
}, 0);
console.log(3); // 3번

/* 콜백 헬

(a, callback) => {
    (b,callback2) => {
        (c, callback3) => {

        }
    }
}

어디서 뭐 하고 넘겨주고, 그 결과값으로 넘겨서 또다른 콜백을 하고....
이게 콜백헬인듯
이거 해결해야돼 >> 프로미스 등장
*/